<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[前端工程-自动上传 CDN]]></title>
      <url>http://localhost:4000/2017/01/03/npm-scripts-cdn/</url>
      <content type="html"><![CDATA[<p>最近有个朋友跟我说到每次上线好麻烦，项目每次 build 完之后都需要打开 CDN 的工具来上传静态的文件，然后复制 CDN 的 URL 进行在相应的位置进行替换。我突然想起了我一年前也碰到类似的问题，当时我还没有操作 CDN 的权限还要别人帮忙上传，上一次线十分的麻烦。于是当时做了个自动化上传 CDN 的工具，大大减少了重复性的工作。</p>
<p>当时用的是 grunt，所以写的是 <a href="https://github.com/hongguancheng/grunt-enai-upyun" target="_blank" rel="external">grunt 的插件</a>，用法好简单，在 grunt build 完之后，执行 grunt enai_upyun 就可以把生成好的目录中的所有文件都上传到 CDN 上，好方便有木有。</p>
<p>后来我们改用 webpack 作为构建工具，所以我用了类似的方法写了一个 <a href="https://github.com/hongguancheng/npm-scripts-cdn" target="_blank" rel="external">npm script 版</a>的上传工具，用法也差不多，后来我结合了 make 组合了下构建命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">build:</div><div class="line">	npm run build</div><div class="line"></div><div class="line">upload-upyun: build </div><div class="line">	npm run enaiUpyun</div><div class="line">	</div><div class="line">release: </div><div class="line">	make upload-upyun</div></pre></td></tr></table></figure>
<p>只需要 make release 一句命令就好了。懒的不行哈哈哈哈哈。</p>
<p>虽然我写的都是基于 upyun 的，但比如其他的服务比如七牛什么的都有相应的 SDK，可以根据自己的需求扩展一下，我把代码都放到了 Github 上了：</p>
<ul>
<li><a href="https://github.com/hongguancheng/grunt-enai-upyun" target="_blank" rel="external">grunt-cdn-upyun</a></li>
<li><a href="https://github.com/hongguancheng/npm-scripts-cdn" target="_blank" rel="external">npm-scripts-cdn</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[年底啦！总结下吧]]></title>
      <url>http://localhost:4000/2016/12/30/2016-summary/</url>
      <content type="html"><![CDATA[<p>不知不觉一年就过去了，这是我来公司的第二年，比起上一年今年在前端这一块变化还是非常的大的，可以说整个前端变化都非常的大，我们公司的前端也跟上了整体的步伐。接下来是对今年的一些思考和展望。</p>
<h3 id="The-Good"><a href="#The-Good" class="headerlink" title="The Good"></a>The Good</h3><p>首先说说好的方面吧，去年我们前端是只有我一个人，今年前端团队终于多了两个人，在前端方面我也没有像之前那么随意了，更加注重团队的发展和怎么才能让我们前端小组开发的更爽，工作效率更高。</p>
<p>总的来说 2016 年主要的个人贡献就是完成了前端工程的基础构建。</p>
<h4 id="前端工程化"><a href="#前端工程化" class="headerlink" title="前端工程化"></a>前端工程化</h4><p>回想起去年我刚来的时候，前端什么都没有，还是用着比较传统的方式，移动端用的是 zepto，后台用的是 jquery + bootstrap。到年中的时候才在移动端用了些自动化的工具。当时还没有前端工程化的概念。自从去年年末接触到 react 的时候才开始觉得我们的前端需要有所改变，不再是单纯做一个切图仔。</p>
<h5 id="库-框架选型"><a href="#库-框架选型" class="headerlink" title="库/框架选型"></a>库/框架选型</h5><p>在 520 活动的时候我们就开始用了 vue.js 作为前端的主要框架作为移动端页面的主要框架，解放了不少生产力，通过前端组件化可以合理的对 UI 组件进行分治，大大加强了代码的复用率，也方便了日后的维护。</p>
<h5 id="简单构建优化和模块化开发"><a href="#简单构建优化和模块化开发" class="headerlink" title="简单构建优化和模块化开发"></a>简单构建优化和模块化开发</h5><p>在选用 vue.js 之前我是用 grunt 来做为构建工具，现在因为项目需要进行模块化开发，最后选用了 webpack 作为构建工具，模块化开发的最大价值应该是分治，因为 Webkit 宣布默认打开 ES6 module 功能，CommonJS、AMD、UMD以及所有模块加载器全部过时，我们选用了 ES6 module。</p>
<h5 id="自动化"><a href="#自动化" class="headerlink" title="自动化"></a>自动化</h5><p>还记得之前有个同事说过，如果你一件事情重复做了 3 遍就需要想办法去做优化，也就是 Don`t repeat your self。前端的自动化是通过 make 加上 npm script 组合的一连串命令执行预先写好的 node 代码完成自动化构建、上传静态文件、自动分环境等操作，上线只需一个命令加上去 apolo 点一下就行了。</p>
<p>同时用 Yeoman 编写了前端项目的脚手架，从此新项目开始就不用傻傻的去复制就项目的代码了，同时还可以再创建项目的时候加入一些配置，按照需求创建项目。</p>
<h5 id="积累"><a href="#积累" class="headerlink" title="积累"></a>积累</h5><p>我在项目中加入了一个各个项目公用的 git submodule。一年之中不断的写了许多公用的代码和工具的方法，包括了一些简单的弹窗和 Ajax 模块等，这个仓库以后一定还会慢慢的积累，方便日后的开发。对于不能放在公共仓库的代码就放在脚手架内。</p>
<h4 id="后台前端框架"><a href="#后台前端框架" class="headerlink" title="后台前端框架"></a>后台前端框架</h4><p>之前用的是 react + reflux，今天在 6.0 改版的时候决定重新写后台，借此机会我换了下结构，用的是 react + redux，虽然项目看起来好像复杂了不少，不过理解了之后一定是有利于项目的开发和日后的维护的。同时对之前简单的构建工具的配置进行了整理，开发起来会更加的方便。</p>
<h3 id="The-Bad"><a href="#The-Bad" class="headerlink" title="The Bad"></a>The Bad</h3><p>好的说完了说说做的不好的吧。</p>
<ul>
<li>首先是我的个人问题，工作的时候有时会有点小情绪，这个需要克制一下。</li>
<li>工作缺少自测，其实这点是必须做的，但是我常常会忽略或者是做的不够认真，以后开发如果条件允许就去借一些手机在身边一起开发</li>
<li>应该及时重构代码而不是“到时候”，提升代码质量。</li>
</ul>
<h3 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h3><p>今年前端团队终于小有规模，希望在来年我们能共同进步吧。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[用 CSS3 做守望先锋的 loader]]></title>
      <url>http://localhost:4000/2016/11/15/overwatch-loader/</url>
      <content type="html"><![CDATA[<p>东西是前阵子写的现在拿出来说下，记得当时守望先锋刚出来没多久，因为电脑比较烂，加载地图速度一直好慢。。。等的时候就一直看着右下角的 loading 动画，看着看着就想着能不能用 CSS3 实现出来，后来为了研究这个动画进了好多好多次训练房间，最后弄出来还原度还是挺高的，效果如下：</p>
<iframe id="cp_embed_EyGjqy" src="//codepen.io/CCG/embed/EyGjqy?height=400&theme-id=0&slug-hash=EyGjqy&default-tab=result" scrolling="no" frameborder="no" height="400" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe>
<p><br> </p>
<h3 id="中间-logo-部分的实现"><a href="#中间-logo-部分的实现" class="headerlink" title="中间 logo 部分的实现"></a>中间 logo 部分的实现</h3><p>中间的 logo 是由一个大圆环，两个平行四边形还有两个三角形组合而成的，平行四边形用 transform: skew 实现，三角形用 border 就可以了。</p>
<h3 id="圆环动画效果"><a href="#圆环动画效果" class="headerlink" title="圆环动画效果"></a>圆环动画效果</h3><p>先说说圆环的实现，圆环有几种实现的方法，第一种是直接用 border</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.overwatch</span> &#123;</div><div class="line">    <span class="attribute">border</span>: <span class="number">10px</span> solid transparent;</div><div class="line">    <span class="attribute">border-top</span>: <span class="number">10px</span> solid <span class="number">#B6B8C0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果：</p>
<p><img src="http://honggc.b0.upaiyun.com/blog/%E5%9C%86%E7%8E%AF.jpg" alt="圆环"></p>
<p>这样就能实现一个 1/4 园环，但是动画中的圆环大小不一所以明显不适合。我这边巧用了 clip 实现。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.ring</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">220px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">220px</span>;</div><div class="line">    <span class="attribute">border</span>: <span class="number">6px</span> solid <span class="built_in">rgba</span>(161, 164, 176, 0.5);</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</div><div class="line">    <span class="attribute">clip</span>: <span class="built_in">rect</span>(0px, 142px, 100px, 90px);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果：</p>
<p><img src="http://honggc.b0.upaiyun.com/blog/%E5%9C%86%E7%8E%AF2.jpg" alt="圆环"></p>
<p>这样就可以简单实现一些小的圆环了，但是用这种圆环来做动画效果非常的蛋疼，要动过 clip 的变化来使圆环大小变化，而且在圆环边缘位置的切线并不是垂直的，不够美观，所以我这里只用这种方法来实现一些小变化不大的圆环，而大的变化大的圆环我用了实现圆形进度条的方法来实现，具体 <a href="https://www.xiabingbao.com/css/2015/07/27/css3-animation-circle.html" target="_blank" rel="external">看这里</a>。</p>
<p>最后添加动画效果就可以实现最终效果了，出了这个我还用了类似的方法实现了<a href="http://codepen.io/CCG/pen/KrANmJ" target="_blank" rel="external">另一个守望先锋的 loading 动画</a>，还原度也是挺好的。</p>
]]></content>
    </entry>
    
  
  
</search>
